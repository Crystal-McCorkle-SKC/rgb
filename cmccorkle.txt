# rgb
We&#39;re going to explore a website that you run right on your desktop today. Use a text document to answer the questions.

1.  Open the index.html file inside of the rgb folder. 
    Done 

2.  Play the game for a few minutes, get to know it, change the difficulty. 

    a.  How would you expand the game? What options or settings could you add? 

    We could add more rows/columns to make it more difficult. We could also add alert boxes if you get the answer correct. We could add in animation to celebrate if you get the answer correct. 

3.  Using this documentation https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction to guide you: 

    a.  What is the DOM?

    DOM stands for the  Document Object Model. It is the data representation of the objects that comprise the structure and content of a document on the web. (tree structure) 
    It is used to represent the HTML page and all of the nested elements. 

    b.  When is the DOM different than HTML?

    The DOM is different than the source HTML when the HTML is not valid and when the DOM is modified by JavaScript.

    c.  What is the state of the DOM when you first load the page?

    DOMContentLoaded occurs when the browser fully loads the HTML, the DOM tree is built, and external stylesheets/sources may have not been loaded yet.
    Load (load) occurs when the HTML is fully loaded as well as the external stylesheets, images, etc ---so this is the state when you first load the page (loaded). 
    The colors are all loaded, the headline at the top is blue, and the score is there (what it is depends on whether you have it set to localSession or 
    storageSession). 

    d.  What is the state of the DOM if you turn off JavaScript and refresh the page? 

    The page loads from top to bottom w/ HTML and includes the CSS. However, the page is static and is no longer interactive. The boxes are all purple because 
    the JavaScript didn't load in and it's the default background color. The score is 0. Nothing happens when you click. 

4.  Now let's explore the code. Use the inspector to investigate the HTML, CSS and Javascript. 

    a.  Which parts of UI are being generated by the HTML file? The CSS? The JavaScript? 

    HTML- the content (body, h1, divs, a tags)

    CSS- styling of the squares, the body's background color and font, styling of h1 and of buttons, etc. 

    JS- allows you to click on the squares, checking to see if the color of the clicked square matches the rgb value, resetting the game (picks a new color) after 
    displaying exact color name or the -ish color name 

    b.  What happens inside the CSS file when you click on various elements in the page? 

        When you click on the squares, the element.style background color gets reset to match the top left square color. Then as you click through
        each div (square) the background color of element.style changes again to match the correct color and all of the squares fill in w/ the color. 

        Within the actual CSS file, the HTML file just uses the stylesheet in the css file to provide the base/default styles for the page. 

        i.  What elements does the CSS file change? 
        h1 background color (when correct color is guessed), the squares (divs--element.style), the backgroud color of the page, the default square color, and the 
        other default styling of the page. 

    c.  What happens inside the HTML file when you click on various elements in the page? 
    
        When you click on a square, the "display: block; background: rgb(35, 35, 35);" highlights and then fades out, when you select the correct
        color, the h1 element also highlights.

    d.  Use breakpoints in the JavaScript to walk through what happens when you click on various elements on the page. 

        i.  What happens when you click on a color block?

        Grabs the color of the clicked square and compares it to the clicked color. If it's the right color, it changes all of the blocks to 
        that color. If it's not the correct color, it changes the color block to the smae as the background. 

        ii.  What happens when you click on the winning color block? 

        The function changeColors(color) is implemented and all the squares are changed to that color and the async function updateColorName() is also called 
        so that the picked color is displayed at the top of the page w/ the color name. 

        iii.  What happens when you click "Play again"? 

        The function randomColor() chooses a new color, function generateRandomColors(num) generates a random color x number of times, 
        function reset() is called--it picks a new random color from the array, and then player plays again.

        iv.  What HTML and CSS elements can JavaScript change? 

        You can use getElementById() and getElementByClassName() in JS to change CSS elements. To change the content of an HTML element, use the 
        innerHTML property. To change the value of an HTML attribute, use this syntax: document.getElementById(id).attribute = new value. 

        v.  How does score keeping work? 

        The score uses the function setupSquares(). It uses localStorage to keep working. The localStorage property is read only and allows 
        you to access a Storage object for the Document's origin; the stored data is saved across browser sessions. 

        vi.  Why does it persist through closing the page? 

        Data stored in localStorage has no expiration time and is specific to the protocol of the page. 

        vii.  Using this documentation: https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage change the JavaScript file to use session storage instead of local storage. 
        Done 
        
        viii.  What's different about the way the score is kept now? 

        With sessionStorage, after you refresh, the score is still the same. If you close out of the browser the score goes back to zero. Whereas, w/ localStorage, the score stays 
        the same after you refresh. If you close out of the browser and open back up, your old score is still saved. 

        ix.  When you win what happens when the title changes? 

        If the clicked color === the picked color, you get a message displayed that says, "Correct!" and a reset button that says "Play Again?". The h1
        tag changes to the clicked color background-color. 

        x.  What does Asynchronous mean in the context of JavaScript? 

        Asynchronous programming allows programs to do more than one thing at a time without having to refresh the page. It means being able to do multiple
        tasks on the page at the same time. 

        xi.  What is the fetch function inside of updateColorName?  

        The fetch function sends a network request and gets information from the server.  

        xii.  What does it do? 

        This fetch function asynchronously goes to https://www.thecolorapi.com/id?rgb= and looks up
	    the correct color in the array for the clicked square to update the ColorName. Then it reads the result and parses it as JSON. 
	    It then updates all of the color blocks to that color and displays the color name OR if it's  not an exact match, the color name 
	    will print out with the color name plus "ish." 

        xiii.  What's an alternative to using fetch? 

        AJAX is an alternative to using fetch. AJAX stands for Asynchronous JavaScript and XML, and is a technology supported by native JavaScript (ECMAScript). Axios is another 
        alternative to fetch. 

        xiv.  Why use one over the other? 

        "Fetch is compatible with all recent browsers including Edge, but not with Internet Explorer. Therefore, if you are looking for maximum compatibility, you will continue to use
        Ajax to update a web page. If you also want to interact with the server, the WebSocket object is also more appropriate than fetch. In other cases, fetch offers a great 
        simplicity to load content in a page." https://www.xul.fr/en/html5/fetch.php#:~:text=Fetch%20is%20compatible%20with%20all,also%20more%20appropriate%20than%20fetch.


5.  Add comments to the JavaScript code explaining what you think each function does. 

    Done

6.  As you went through this process which of the 3E's did you draw from most? How?

    a.  Curiosity, Deal with Uncertainty, Observation Skills

        I think that the 3E skill that I used the most during this lab was my observation skills. Testing out things in the inspector tool and seeing what results happened 
        was helpful to be able to answer a lot of this lab's questions. I definitely had to pay attention and notice what was happening along the way to figure out how the 
        moving parts worked together. 

        I also think I dealt with a lot of uncertainty as well during this assigment. Just being open to trying to figure out how things work even though I don't quite
        understand yet all of the parts.


7.  Push your changes to Git.

Other Resources: 

- https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage

- https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

- https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage

- https://developers.google.com/web/tools/chrome-devtools/javascript